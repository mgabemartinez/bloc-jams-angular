// Generated by CoffeeScript 1.6.2
(function() {
  var Blanket, async, blkt, fs, uglify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  async = require('async');

  blkt = require('blanket');

  uglify = require('uglify-js');

  module.exports = Blanket = (function() {
    Blanket.prototype.brunchPlugin = true;

    Blanket.prototype.type = 'javascript';

    function Blanket(config) {
      var key, value, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

      this.config = config;
      this.optimize = __bind(this.optimize, this);
      this.blanket = {
        pattern: /app\.js$/,
        options: {
          engineOnly: true
        }
      };
      this.uglify = {
        pattern: /(vendor|app)\.js$/,
        fromString: true
      };
      if (typeof ((_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? _ref1.blanket : void 0 : void 0) === 'object') {
        _ref2 = this.config.plugins.blanket;
        for (key in _ref2) {
          value = _ref2[key];
          this.blanket[key] = value;
        }
      }
      if (typeof ((_ref3 = this.config) != null ? (_ref4 = _ref3.plugins) != null ? _ref4.uglify : void 0 : void 0) === 'object') {
        _ref5 = this.config.plugins.uglify;
        for (key in _ref5) {
          value = _ref5[key];
          this.uglify[key] = value;
        }
      }
    }

    Blanket.prototype.optimize = function(data, path, callback) {
      var _this = this;

      return async.parallel([
        function(next) {
          var blanket, err, name;

          if (!_this.blanket.pattern.test(path)) {
            return next(null);
          }
          try {
            name = path.replace(/\.js$/, '.cov.js');
            blanket = blkt({
              "data-cover-flags": _this.blanket.options
            });
            return blanket.instrument({
              inputFile: data,
              inputFileName: path
            }, function(result) {
              return fs.writeFile(name, result, next);
            });
          } catch (_error) {
            err = _error;
            return next(err);
          }
        }, function(next) {
          var err, name, result;

          if (!_this.uglify.pattern.test(path)) {
            return next(null);
          }
          try {
            name = path.replace(/\.js$/, '.min.js');
            result = uglify.minify(data, _this.uglify);
            return fs.writeFile(name, result.code, next);
          } catch (_error) {
            err = _error;
            return next(err);
          }
        }
      ], function(err, res) {
        return callback(err, data);
      });
    };

    return Blanket;

  })();

}).call(this);
