// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Linter, coffeelint, exports, fs, jshint, read, resolve,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  coffeelint = require('coffeelint');

  jshint = require('jshint').JSHINT;

  resolve = require('path').resolve;

  fs = require('fs');

  read = function(path) {
    path = resolve(path);
    return fs.readFileSync(path).toString();
  };

  Linter = (function(_super) {

    __extends(Linter, _super);

    function Linter(config, logger) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this._source = (_ref = config != null ? config.source : void 0) != null ? _ref : /.*\.(coffee|js)$/;
      this._config = (_ref1 = config != null ? config.linter : void 0) != null ? _ref1 : {};
      this._coffeelint = {};
      this._coffeelint.options = (_ref2 = (_ref3 = this._config.coffeelint) != null ? _ref3.options : void 0) != null ? _ref2 : {};
      this._coffeelint.pattern = (_ref4 = (_ref5 = this._config.coffeelint) != null ? _ref5.pattern : void 0) != null ? _ref4 : /.*\.coffee$/;
      this._jshint = {};
      this._jshint.options = (_ref6 = this._config.jshint) != null ? _ref6.options = {} : void 0;
      this._jshint.globals = (_ref7 = this._config.jshint) != null ? _ref7.globals = {} : void 0;
      this._jshint.pattern = (_ref8 = this._config.jshint) != null ? _ref8.pattern = /^.*\.js$/ : void 0;
      this._debug = config.debug != null ? require('debug')("" + config.debug + ":linter") : function() {};
      this._logger = logger != null ? logger : console;
    }

    Linter.prototype._csError = function(file, err) {
      this._logger.error("" + file + "[" + err.lineNumber + "] - " + err.message + "         " + (err.context != null ? ', ' + err.context : ''));
      return this.emit('coffeelint:error', file, err);
    };

    Linter.prototype._csLint = function(file) {
      var error, errors, _i, _len, _results;
      try {
        this.emit('coffeelint:file', file);
        errors = coffeelint.lint(read(file), this._coffeelint.options);
        _results = [];
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          error = errors[_i];
          _results.push(this._csError(file, error));
        }
        return _results;
      } catch (error) {
        return this._csError(file, error);
      }
    };

    Linter.prototype._jsError = function(file, err) {
      this._logger.error("" + file + "[" + err.line + "] - " + err.reason + "         " + (err.evidence != null ? ', ' + err.evidence : ''));
      return this.emit('jshint:error', file, err);
    };

    Linter.prototype._jsLint = function(file) {
      var error, success, _i, _len, _ref, _results;
      this.emit('jshint:file', file);
      success = jshint(read(file), this._jshint.options, this._jshint.globals);
      if (!success) {
        _ref = jshint.errors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          error = _ref[_i];
          if (error != null) {
            _results.push(this._jsError(error, file));
          }
        }
        return _results;
      }
    };

    Linter.prototype.lint = function() {
      var file, files, _i, _len, _results;
      files = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (!(this._source.test(file))) {
          continue;
        }
        this._debug("Linting " + file + "...");
        this.emit('file', file);
        if (this._coffeelint.pattern.test(file)) {
          _results.push(this._csLint(file));
        } else if (this._jshint.pattern.test(file)) {
          _results.push(this._jsLint(file));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Linter.prototype.listen = function(watcher, snapshot, delay) {
      var _this = this;
      if (delay == null) {
        delay = 1000;
      }
      if (this._config.enabled === false) {
        return;
      }
      this._logger.info('Linting files...');
      this.emit('listening');
      return setTimeout(function() {
        _this.lint.apply(_this, snapshot);
        watcher.on('add', function(path) {
          if (_this._source.test(path)) {
            return _this.lint(path);
          }
        });
        return watcher.on('change', function(path) {
          if (_this._source.test(path)) {
            return _this.lint(path);
          }
        });
      }, delay);
    };

    return Linter;

  })(EventEmitter);

  module.exports = exports = Linter;

}).call(this);
