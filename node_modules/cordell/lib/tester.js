// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Mocha, Tester, exports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventEmitter = require('events').EventEmitter;

  Mocha = require('mocha');

  Tester = (function(_super) {

    __extends(Tester, _super);

    function Tester(config, logger) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this._source = (_ref = config.source) != null ? _ref : /.*\.(coffee|js)$/;
      this._config = (_ref1 = config != null ? config.tester : void 0) != null ? _ref1 : {};
      this._mocha = {};
      this._mocha.pattern = (_ref2 = (_ref3 = this._config.mocha) != null ? _ref3.pattern : void 0) != null ? _ref2 : /^.*_test\.(coffee|js)$/;
      this._mocha.options = (_ref4 = (_ref5 = this._config.mocha) != null ? _ref5.options : void 0) != null ? _ref4 : {
        reporter: 'spec'
      };
      this._mocha.tests = [];
      this._debug = config.debug != null ? require('debug')("" + config.debug + ":tester") : function() {};
      this._logger = logger != null ? logger : console;
    }

    Tester.prototype._mochaRun = function(files) {
      var file, mocha, _i, _len,
        _this = this;
      mocha = new Mocha(this._mocha.options);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this._debug("Running " + file + "...");
        this.emit('mocha:addFile', file);
        mocha.addFile(file);
      }
      return mocha.run(function(failures) {
        return _this.emit('mocha:failures', failures);
      });
    };

    Tester.prototype.add = function() {
      var path, paths, _i, _len;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        if (this._mocha.pattern.test(path)) {
          if (__indexOf.call(this._mocha.tests, path) < 0) {
            this._mocha.tests.push(path);
          }
        }
      }
      return this;
    };

    Tester.prototype.rem = function() {
      var i, path, paths, _i, _j, _len, _len1, _ref;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        _ref = this._mocha.tests;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          i = _ref[_j];
          if (i === path) {
            this._mocha.tests.splice(i, 1);
          }
        }
      }
      return this;
    };

    Tester.prototype.run = function(path) {
      if ((path != null) && __indexOf.call(this._mocha.tests, path) >= 0) {
        this._mochaRun([path]);
      } else {
        this._mochaRun(this._mocha.tests);
      }
      return this;
    };

    Tester.prototype.test = function() {
      var files, paths,
        _this = this;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      files = paths.filter(function(file) {
        return _this._source.test(file);
      });
      this.add.apply(this, files);
      return this.run();
    };

    Tester.prototype.listen = function(watcher, snapshot, delay) {
      var _this = this;
      if (delay == null) {
        delay = 2000;
      }
      if (this._config.enabled === false) {
        return;
      }
      this._logger.info('Running tests...');
      return setTimeout(function() {
        _this.test.apply(_this, snapshot);
        watcher.on('add', function(path) {
          if (_this._source.test(path)) {
            return _this.add(path).run(path);
          }
        });
        watcher.on('rem', function(path) {
          if (_this._source.test(path)) {
            return _this.rem(path).run();
          }
        });
        return watcher.on('change', function(path) {
          if (_this._source.test(path)) {
            return _this.run(path);
          }
        });
      }, delay);
    };

    return Tester;

  })(EventEmitter);

  module.exports = exports = Tester;

}).call(this);
