// Generated by CoffeeScript 1.4.0
(function() {
  var Linter, Tester, Walker, Watcher, resetCache, resolve;

  resolve = require('path').resolve;

  module.exports.Linter = Linter = require('./linter');

  module.exports.Tester = Tester = require('./tester');

  module.exports.Walker = Walker = require('./walker');

  module.exports.Watcher = Watcher = require('./watcher');

  resetCache = function(files) {
    var key, path, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      path = files[_i];
      path = resolve(path);
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key in require.cache) {
          if (key === path) {
            delete require.cache[key];
            break;
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  ({
    remItem: function(items, item) {
      var i, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        if (i === item) {
          _results.push(items.splice(i, 1));
        }
      }
      return _results;
    }
  });

  module.exports.walk = function(paths, options, watcher) {
    return new Walker(paths, options, watcher);
  };

  module.exports.watch = function(paths, options, watcher) {
    if (options == null) {
      options = {};
    }
    options.watch = true;
    return new Walker(paths, options, watcher);
  };

  module.exports.ranger = function(paths, options, logger) {
    var linter, tester, walker;
    if (options == null) {
      options = {};
    }
    options.watch = true;
    linter = new Linter(options, logger);
    tester = new Tester(options, logger);
    walker = new Walker(paths, options);
    return walker.on('end', function(files, stats) {
      walker.on('add', function(path) {
        resetCache(files);
        return files.push(path);
      });
      walker.on('rem', function(path) {
        resetCache(files);
        return remItem(files, path);
      });
      walker.on('change', function(path) {
        return resetCache(files);
      });
      linter.listen(walker, files, 1000);
      return tester.listen(walker, files, 2000);
    });
  };

  module.exports.lint = function(paths, options, logger) {
    var linter, walker;
    if (options == null) {
      options = {};
    }
    linter = new Linter(options, logger);
    walker = new Walker(paths, options);
    return walker.on('end', function(files, stats) {
      return linter.lint.apply(linter, files);
    });
  };

  module.exports.test = function(paths, options, logger) {
    var tester, walker;
    if (options == null) {
      options = {};
    }
    tester = new Tester(options);
    tester.on('mocha:failures', function(failures) {
      return process.exit(failures);
    });
    walker = new Walker(paths, options);
    return walker.on('end', function(files, stats) {
      return tester.test.apply(tester, files);
    });
  };

  module.exports.snapshot = function(paths, options, callback) {
    var walker;
    if (options == null) {
      options = {};
    }
    options.watch = false;
    walker = new Walker(paths, options);
    return walker.on('end', callback);
  };

}).call(this);
