// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Walker, Watcher, basename, dirname, exports, isArray, join, readdir, stat, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  _ref = require('path'), dirname = _ref.dirname, basename = _ref.basename, join = _ref.join;

  _ref1 = require('fs'), stat = _ref1.stat, readdir = _ref1.readdir;

  isArray = require('util').isArray;

  Watcher = require('./watcher');

  Walker = (function(_super) {

    __extends(Walker, _super);

    function Walker(paths, options, watcher) {
      var _ref2, _ref3, _ref4, _ref5;
      if (options == null) {
        options = {};
      }
      this._ignore = (_ref2 = options.ignore) != null ? _ref2 : /a^/;
      this._ignorePath = (_ref3 = options.ignorePath) != null ? _ref3 : /a^/;
      this._match = (_ref4 = options.match) != null ? _ref4 : /.*/;
      this._matchPath = (_ref5 = options.matchPath) != null ? _ref5 : /.*/;
      this._options = options;
      this._files = {};
      this._paths = {};
      this._hasEnded = false;
      if (options.debug != null) {
        this._debug(options.debug);
      }
      if ((watcher != null) || (options.watch != null)) {
        this._watch(watcher, options);
      }
      if (paths != null) {
        if (!isArray(paths)) {
          paths = [paths];
        }
        this.walk.apply(this, paths);
      }
    }

    Walker.prototype._watch = function(watcher, options) {
      var _this = this;
      this._watcher = watcher != null ? watcher : new Watcher(options);
      this._watcher.on('add:dir', function(path, stats, list) {
        var file, _i, _len;
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          file = list[_i];
          _this._stat(join(path, file));
        }
        _this.emit('add:dir', path, stats, list.slice(0));
        return _this.emit('dir', path, stats, list.slice(0));
      });
      this._watcher.on('add:file', function(path, stats) {
        _this._files[path] = stats;
        _this.emit('add', path, stats);
        return _this.emit('file', path, stats);
      });
      this._watcher.on('rem:dir', function(path) {
        return _this.emit('rem:dir', path);
      });
      this._watcher.on('rem:file', function(path) {
        _this._rem(path);
        _this.emit('rem', path);
        return _this.emit('unlink', path);
      });
      this._watcher.on('change:dir', function(path, stats, list) {
        return _this.emit('change:dir', path, stats, list);
      });
      this._watcher.on('change:file', function(path, stats) {
        return _this.emit('change', path, stats);
      });
      this._watcher.on('error', function(path, error) {
        return this.emit('error', path, error);
      });
      this.on('file', function(path) {
        return this._watcher.addFile(path);
      });
      return this.on('dir', function(path, stats, list) {
        return this._watcher.addDir(path, list);
      });
    };

    Walker.prototype._debug = function(name) {
      var debug;
      debug = require('debug')("" + name + ":walker");
      this.on('dir', function(path) {
        return debug("Dir: " + path);
      });
      this.on('file', function(path) {
        return debug("File: " + path);
      });
      this.on('other', function(path) {
        return debug("Other " + path);
      });
      this.on('error', function(path, error) {
        return debug("Error: " + path + " - " + error.message);
      });
      this.on('end', function(files) {
        return debug("End: " + files.length + " files found");
      });
      this.on('add', function(path) {
        return debug("Add: " + path);
      });
      this.on('rem', function(path) {
        return debug("Remove: " + path);
      });
      return this.on('change', function(path) {
        return debug("Change: " + path);
      });
    };

    Walker.prototype._rem = function(path) {
      return delete this._files[path];
    };

    Walker.prototype._clone = function(obj) {
      var clone, key, value;
      clone = {};
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        clone[key] = value;
      }
      return clone;
    };

    Walker.prototype._stat = function(path) {
      var _this = this;
      this._paths[path] = path;
      return stat(path, function(err, stats) {
        if (err) {
          return _this._error(path, err);
        }
        if (stats.isDirectory()) {
          return _this._dir(path, stats);
        }
        if (stats.isFile()) {
          return _this._file(path, stats);
        }
        return _this._other(path, stats);
      });
    };

    Walker.prototype._dir = function(path, stats) {
      var _this = this;
      if (!this._ignorePath.test(path)) {
        if (this._matchPath.test(path)) {
          return readdir(path, function(err, list) {
            var file, _i, _len;
            if (err) {
              return _this._error(path, err);
            }
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              file = list[_i];
              _this._stat(join(path, file));
            }
            _this.emit('dir', path, stats, list.slice(0));
            return _this._end(path);
          });
        } else {
          return this._end(path);
        }
      } else {
        return this._end(path);
      }
    };

    Walker.prototype._file = function(path, stats) {
      if (!this._ignore.test(basename(path))) {
        if (this._match.test(basename(path))) {
          this._files[path] = stats;
          this.emit('file', path, stats);
        }
      }
      return this._end(path);
    };

    Walker.prototype._other = function(path, stats) {
      this.emit('other', path, stats);
      return this._end(path);
    };

    Walker.prototype._error = function(path, err) {
      this.emit('error', path, err);
      return this._end(path);
    };

    Walker.prototype._end = function(path) {
      delete this._paths[path];
      if (this._hasEnded) {
        return;
      }
      if (Object.keys(this._paths).length === 0) {
        this.emit('end', Object.keys(this._files), this._clone(this._files));
        return this._hasEnded = true;
      }
    };

    Walker.prototype._close = function() {
      var _ref2;
      if ((_ref2 = this._watcher) != null) {
        _ref2.close();
      }
      this._files = {};
      this._paths = {};
      this._hasEnded = false;
      this.removeListener('end', this._close);
      this.emit('closed');
      return this;
    };

    Walker.prototype.walk = function() {
      var path, paths, _i, _len;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        this._stat(path);
      }
      return this;
    };

    Walker.prototype.close = function() {
      if (this._hasEnded) {
        return this._close();
      }
      if (Object.keys(this._paths).length !== 0) {
        this.on('end', this._close);
      }
      return this;
    };

    return Walker;

  })(EventEmitter);

  module.exports = exports = Walker;

}).call(this);
