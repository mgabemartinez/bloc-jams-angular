// Generated by CoffeeScript 1.4.0
(function() {
  var Watch, exports, join, readdir, stat, watch, _ref,
    __hasProp = {}.hasOwnProperty;

  _ref = require('fs'), stat = _ref.stat, readdir = _ref.readdir, watch = _ref.watch;

  join = require('path').join;

  Watch = (function() {

    function Watch() {}

    Watch.prototype.addDir = function(path, list) {
      var _this = this;
      if (list == null) {
        list = [];
      }
      if (this._watching.dirs[path]) {
        return;
      }
      this._watching.dirs[path] = watch(path, this._options, function(evnt, name) {
        return stat(path, function(err, stats) {
          if (err) {
            return _this.emit('error', path, err);
          }
          return readdir(path, function(err, nl) {
            var f, _i, _j, _len, _len1;
            if (err) {
              return _this.emit('error', path, err);
            }
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              f = list[_i];
              if ((nl.indexOf(f)) === -1) {
                _this.rem(join(path, f));
              }
            }
            for (_j = 0, _len1 = nl.length; _j < _len1; _j++) {
              f = nl[_j];
              if ((list.indexOf(f)) === -1) {
                _this.add(join(path, f));
              }
            }
            list = nl;
            _this.emit('change', path, stats);
            return _this.emit('change:dir', path, stats, list.slice(0));
          });
        });
      });
      this.emit('watch', path);
      this.emit('watch:dir', path);
      return this;
    };

    Watch.prototype.addFile = function(path) {
      var _this = this;
      if (this._watching.files[path]) {
        return;
      }
      this._watching.dirs[path] = watch(path, this._options, function(event, filename) {
        if (event === 'change') {
          return stat(path, function(err, stats) {
            if (err) {
              return _this.emit('error', path, err);
            }
            _this.emit('change', path, stats);
            return _this.emit('change:file', path, stats);
          });
        } else if (event === 'rename') {
          _this._watching.dirs[path].close();
          return delete _this._watching.dirs[path];
        }
      });
      this.emit('watch', path);
      this.emit('watch:file', path);
      return this;
    };

    Watch.prototype.remDir = function(path) {
      if (!this._watching.dirs[path]) {
        return;
      }
      this._watching.dirs[path].close();
      delete this._watching.dirs[path];
      this.emit('unwatch', path);
      this.emit('unwatch:dir', path);
      return this;
    };

    Watch.prototype.remFile = function(path) {
      if (!this._watching.files[path]) {
        return;
      }
      this._watching.dirs[path].close();
      delete this._watching.files[path];
      this.emit('unwatch', path);
      this.emit('unwatch:file', path);
      return this;
    };

    Watch.prototype.close = function() {
      var dirs, files, listener, path;
      files = this._watching.files;
      dirs = this._watching.dirs;
      this._watching.files = {};
      this._watching.dirs = {};
      for (path in files) {
        if (!__hasProp.call(files, path)) continue;
        listener = files[path];
        listener.close();
        this.emit('unwatch', path);
        this.emit('unwatch:file', path);
      }
      for (path in dirs) {
        if (!__hasProp.call(dirs, path)) continue;
        listener = dirs[path];
        listener.close();
        this.emit('unwatch', path);
        this.emit('unwatch:dir', path);
      }
      return this;
    };

    return Watch;

  })();

  module.exports = exports = Watch;

}).call(this);
