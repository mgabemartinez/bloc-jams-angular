// Generated by CoffeeScript 1.4.0
(function() {
  var WatchFile, exports, join, readdir, unwatchFile, watchFile, _ref,
    __hasProp = {}.hasOwnProperty;

  _ref = require('fs'), readdir = _ref.readdir, watchFile = _ref.watchFile, unwatchFile = _ref.unwatchFile;

  join = require('path').join;

  WatchFile = (function() {

    function WatchFile() {}

    WatchFile.prototype.addDir = function(path, list) {
      var _this = this;
      if (list == null) {
        list = [];
      }
      if (this._watching.dirs[path]) {
        return;
      }
      this._watching.dirs[path] = function(curr, prev) {
        if (curr.mtime.getTime() <= prev.mtime.getTime()) {
          return;
        }
        return readdir(path, function(err, nl) {
          var f, _i, _j, _len, _len1;
          if (err) {
            return _this.emit('error', path, err);
          }
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            f = list[_i];
            if ((nl.indexOf(f)) === -1) {
              _this.rem(join(path, f));
            }
          }
          for (_j = 0, _len1 = nl.length; _j < _len1; _j++) {
            f = nl[_j];
            if ((list.indexOf(f)) === -1) {
              _this.add(join(path, f));
            }
          }
          list = nl;
          _this.emit('change', path, curr);
          return _this.emit('change:dir', path, curr, list.slice(0));
        });
      };
      watchFile(path, this._options, this._watching.dirs[path]);
      this.emit('watch', path);
      this.emit('watch:dir', path);
      return this;
    };

    WatchFile.prototype.addFile = function(path) {
      var _this = this;
      if (this._watching.files[path]) {
        return;
      }
      this._watching.files[path] = function(curr, prev) {
        if (curr.mtime.getTime() <= prev.mtime.getTime()) {
          return;
        }
        _this.emit('change', path, curr);
        return _this.emit('change:file', path, curr);
      };
      watchFile(path, this._options, this._watching.files[path]);
      this.emit('watch', path);
      this.emit('watch:file', path);
      return this;
    };

    WatchFile.prototype.remDir = function(path) {
      if (!this._watching.dirs[path]) {
        return;
      }
      unwatchFile(path, this._watching.dirs[path]);
      delete this._watching.dirs[path];
      this.emit('unwatch', path);
      this.emit('unwatch:dir', path);
      return this;
    };

    WatchFile.prototype.remFile = function(path) {
      if (!this._watching.files[path]) {
        return;
      }
      unwatchFile(path, this._watching.dirs[path]);
      delete this._watching.files[path];
      this.emit('unwatch', path);
      this.emit('unwatch:file', path);
      return this;
    };

    WatchFile.prototype.close = function() {
      var dirs, files, listener, path;
      files = this._watching.files;
      dirs = this._watching.dirs;
      this._watching.files = {};
      this._watching.dirs = {};
      for (path in files) {
        if (!__hasProp.call(files, path)) continue;
        listener = files[path];
        unwatchFile(path, listener);
        this.emit('unwatch', path);
        this.emit('unwatch:file', path);
      }
      for (path in dirs) {
        if (!__hasProp.call(dirs, path)) continue;
        listener = dirs[path];
        unwatchFile(path, listener);
        this.emit('unwatch', path);
        this.emit('unwatch:dir', path);
      }
      return this;
    };

    return WatchFile;

  })();

  module.exports = exports = WatchFile;

}).call(this);
