// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Watcher, basename, exports, join, modules, readdir, sep, stat, unwatchFile, watch, watchFile, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  _ref = require('fs'), stat = _ref.stat, readdir = _ref.readdir, watchFile = _ref.watchFile, unwatchFile = _ref.unwatchFile, watch = _ref.watch;

  _ref1 = require('path'), basename = _ref1.basename, join = _ref1.join;

  modules = {
    watch: require('./watch'),
    watchFile: require('./watchFile')
  };

  sep = process.platform === 'win32' ? '\\' : '/';

  Watcher = (function(_super) {

    __extends(Watcher, _super);

    function Watcher(options, module) {
      var method, name, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      if (options == null) {
        options = {};
      }
      if (options.debug != null) {
        this._debug(options.debug);
      }
      this._ignore = (_ref2 = options.ignore) != null ? _ref2 : /a^/;
      this._ignorePath = (_ref3 = options.ignorePath) != null ? _ref3 : /a^/;
      this._match = (_ref4 = options.match) != null ? _ref4 : /.*/;
      this._matchPath = (_ref5 = options.matchPath) != null ? _ref5 : /.*/;
      this._watching = {
        files: {},
        dirs: {}
      };
      this._options = {};
      this._options.persistent = (_ref6 = options.persistent) != null ? _ref6 : true;
      this._options.interval = (_ref7 = options.interval) != null ? _ref7 : 100;
      this._module = (_ref8 = options.module) != null ? _ref8 : 'watchFile';
      if (module == null) {
        module = new modules[this._module];
      }
      for (name in module) {
        method = module[name];
        this[name] = method;
      }
    }

    Watcher.prototype._debug = function(name) {
      var debug;
      debug = require('debug')("" + name + ":watcher");
      this.on('add:file', function(path) {
        return debug("Added File: " + path);
      });
      this.on('add:dir', function(path) {
        return debug("Added Directory: " + path);
      });
      this.on('rem:file', function(path) {
        return debug("Removed File: " + path);
      });
      this.on('rem:dir', function(path) {
        return debug("Removed Directory: " + path);
      });
      this.on('change:file', function(path) {
        return debug("Changed File: " + path);
      });
      this.on('change:dir', function(path) {
        return debug("Changed Directory: " + path);
      });
      this.on('watch:file', function(path) {
        return debug("Watching File: " + path);
      });
      this.on('watch:dir', function(path) {
        return debug("Watching Directory: " + path);
      });
      this.on('unwatch:file', function(path) {
        return debug("Unwatching File: " + path);
      });
      this.on('unwatch:dir', function(path) {
        return debug("Unwatching Directory: " + path);
      });
      return this.on('error', function(path, error) {
        return debug("Error: " + path + " - " + error.message);
      });
    };

    Watcher.prototype._dir = function(path, stats) {
      var _this = this;
      if (!this._ignorePath.test(path)) {
        if (this._matchPath.test(path)) {
          return readdir(path, function(err, list) {
            if (err) {
              return _this.emit('error', path, err);
            }
            _this.emit('add', path, stats);
            _this.emit('add:dir', path, stats, list.slice(0));
            return _this.addDir(path, list);
          });
        }
      }
    };

    Watcher.prototype._file = function(path, stats) {
      if (!this._ignore.test(basename(path))) {
        if (this._match.test(basename(path))) {
          this.emit('add', path, stats);
          this.emit('add:file', path, stats);
          return this.addFile(path);
        }
      }
    };

    Watcher.prototype.add = function(path) {
      var _this = this;
      if (this._watching.dirs[path]) {
        return;
      }
      if (this._watching.files[path]) {
        return;
      }
      stat(path, function(err, stats) {
        if (err) {
          return _this.emit('error', path, err);
        }
        if (stats.isDirectory()) {
          return _this._dir(path, stats);
        }
        if (stats.isFile()) {
          return _this._file(path, stats);
        }
      });
      return this;
    };

    Watcher.prototype.rem = function(path) {
      var dir, file, listener, _ref2, _ref3;
      _ref2 = this._watching.files;
      for (file in _ref2) {
        if (!__hasProp.call(_ref2, file)) continue;
        listener = _ref2[file];
        if (file === path) {
          this.remFile(file);
          this.emit('rem', file);
          this.emit('rem:file', file);
          return this;
        }
        if ((file.indexOf(path + sep)) === 0) {
          this.remFile(file);
          this.emit('rem', file);
          this.emit('rem:file', file);
        }
      }
      _ref3 = this._watching.dirs;
      for (dir in _ref3) {
        if (!__hasProp.call(_ref3, dir)) continue;
        listener = _ref3[dir];
        if (dir === path || (dir.indexOf(path + sep)) === 0) {
          this.remDir(dir);
          this.emit('rem', dir);
          this.emit('rem:dir', dir);
        }
      }
      return this;
    };

    return Watcher;

  })(EventEmitter);

  module.exports = exports = Watcher;

}).call(this);
