{
  "name": "cordell",
  "description": "Cordell - One bad mofo directory walker and file watcher",
  "version": "0.1.5",
  "keywords": [
    "walker",
    "watcher",
    "fs",
    "watch",
    "watchFile",
    "file",
    "chokidar"
  ],
  "homepage": "https://github.com/jerfowler/cordell",
  "author": {
    "name": "Jeremy Fowler",
    "email": "jeremy.f76@gmail.com",
    "url": "http://jerfowler.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jerfowler/cordell.git"
  },
  "bugs": {
    "url": "https://github.com/jerfowler/cordell/issues"
  },
  "license": "BSD",
  "main": "./lib/index.js",
  "engines": {
    "node": "~0.6.20 || 0.7 || 0.8 || 0.9 || 0.10"
  },
  "scripts": {
    "prepublish": "coffee -o lib/ src/",
    "test": "coffee test.coffee",
    "ci": "coffee ranger.coffee"
  },
  "dependencies": {
    "mocha": "~1.7.3",
    "debug": "~0.7.2",
    "coffeelint": "~0.5.4",
    "jshint": "~1.1.0"
  },
  "devDependencies": {
    "chai": "~1.4.0",
    "sinon": "~1.5.2",
    "sinon-chai": "2.2.0",
    "coffee-script": "~1.4.0"
  },
  "readmeFilename": "README.md",
  "_id": "cordell@0.1.5",
  "_from": "cordell@*",
  "readme": "# Cordell Walker - CI Ranger\n\nOne bad mother...\n\nA walker, watcher, and CI utility that delivers a smooth roundhouse kick to your \ncurrent development environment.\n\n[![build status](https://secure.travis-ci.org/jerfowler/cordell.png)](http://travis-ci.org/jerfowler/cordell)\n\n## What is this?\n\n- An event based file / directory walker utility\n- An event based file / directory watcher utility\n- A CI environment utility linter / tester / watcher\n\n### What about chokidar?\n\nI like [chokidar](https://github.com/paulmillr/chokidar) and it was inspiration\nfor this project. However, I wanted a clean way to get a snapshot of the files that\nalready existed and those files that were added later. I wanted a utility that was a \nbit more verbose when describing what it was doing when it was doing it. I wanted a\nutility that separated the recursive directory walking chocolate from the file \nwatching peanut butter, but still come together in perfect harmony. \n\nFinally, I wanted a utility that watched my files as I coded and immediately linted \nand tested them when there are changes... over and over again... while flushing the \nrequire cache and dynamically reloading modules in a single process.\n\nI feel Cordell does all that and more.\n\n### What does Cordell do different?\n\n- walking and watching functionality cleanly separated\n- more events that you can shake a stick at\n- more configurable ignore and match options\n- crisp / clean coffeescript source\n- a built-in CI environment that makes use of the watcher / walker combo\n    - [mocha](http://visionmedia.github.com/mocha/)\n    - [coffeelint](http://www.coffeelint.org/)\n    - [jshint](http://www.jshint.com/)\n\n## How does it work?\n\n### Install Cordell\nCordell can be installed via the node.js package manager\n\n        npm install cordell\n\nThen just require the package like normal\n\n### Walking files & directories\n\n```javascript\nvar cordell = require('cordell');\n\nvar walker = cordell.walk('file, dir, or array', {ignore: /^\\./, match: /*.\\.js$/});\nwalker\n    .on('file', function(path, stat){ \n        console.log('File', path, '[', stat.size, ']', 'was found...'); });\n    .on('dir', function(path, stat, list){ \n        console.log('Directory', path, 'has', list.length, 'files...'); });\n    .on('error', function(path, error){\n        console.log('Error happened at', path, error); });\n    .on('end', function(files, stats){ \n        console.log('There were', files.length, 'total files found...');\n        // To reset the walker and emit a new `end` event\n        // walker.close();\n     });\n\n// Add additional paths or wait till all your listeners are in place before walking\nwalker.walk('file', 'dir', paths...)\n```\n\n### Watching files & directories\n\n```javascript\nvar watcher = cordell.watch('file, dir, or array', {ignore: /^\\./, match: /*.\\.js$/});\nwatcher\n    .on('add', function(file, stat){\n        console.log('File', path, 'has been added'); });\n    .on('add:dir', function(file, stat, list){\n        console.log('Directory', path, 'was added. With', list.length, 'files.'); });\n\n    .on('rem', function(path){ // also emits 'unlink' for chokidar compatibility\n        console.log('File', path, 'has been removed'); });\n    .on('rem:dir', function(path){\n        console.log('Directoy', path, 'has been removed'); });\n\n    .on('change', function(file, stat){ \n        console.log('File', path, 'has been changed'); });\n    .on('change:dir', function(path, stat, list){\n        console.log('Directoy', path, 'has changed. Now', list.length, 'files.');); });\n\n    // Plus all the walk events\n    .on('file', function(path, stat){ \n        // file events are emitted while walking and when new files are added\n        console.log('File', path, '[', stat.size, ']', 'was found...'); });\n    .on('dir', function(path, stat, list){ \n        // dir events are emitted while walking and when new directories are added\n        console.log('Directory', path, 'has', list.length, 'files...'); });\n\n    .on('error', function(path, error){\n        console.log('Error happened at', path, error); });\n    .on('end', function(files, stats){ \n        console.log('There were', files.length, 'initial files found...'); });\n\n\n// You can still add additional paths or wait till all your listeners are in place before watching\nwatcher.walk('file', 'dir', paths...)\n\n\n// To stop watching files\n// watcher.close();\n```\n\n### Ranger CI functionality\n\n```javascript\noptions = {\n    ignorePath: /fixtures/,\n    persistent: true,\n    linter: {\n        enabled: on,\n        coffeelint: {\n            pattern: /.*\\.coffee$/,\n            options: { indentation: { value: 4, level: \"error\" } }\n        }\n    },\n    tester: {\n        enabled: on,\n        mocha: {\n            pattern: /^.*_test\\.coffee$/,\n            options: { reporter:'spec' }\n        }\n    }\n}\n\nranger = cordell.ranger(['src', 'test'], options);\n```\n\nSee the test.coffee script, we eat our own dog food here...\n\n## API\n\ncoming soon... (read the test files for now)"
}
